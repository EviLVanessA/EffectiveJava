解耦(decouple)
1、尽可能地使每个类或者成员不被外界访问
2、对于顶级的(非嵌套的)类和接口，只有两种可能的访问级别：包级私有的(package-private)和共有的(public)
3、如果一个包级私有的顶层类(或者接口)只是在某一个类的内部被使用，就应该考虑使它成为唯一使用它的那个类的私有
    嵌套类。这样可以将它的访问范围从包中的所有类缩小到使用它的那个类。
4、对于成员(域、方法、嵌套类、嵌套接口)有四种可能的访问级别：
    private：只有声明该成员的顶层类内部才可以访问这个成员)
    缺省：default,包级私有的 包内部的任何类都可以访问这个成员 接口的默认访问为public
    protected:受保护的，声明该成员的类的子类可以访问这个成员(但有一定的限制)，并且声明该成员的包内部的任何类
              也可以访问该成员
    public:在任何地方都可以访问该成员
5、共有类的实例域对不能为共有的，包含公有可变域的类通常不是线程安全的
6、为了使类成为不可变类要遵循五条规则：
    ①不要提供任何会修改对象状态的方法
    ②保证类不会被扩展
    ③声明所有的域都是final
    ④声明所有的域都是私有的(private)
    ⑤确保对于任何可变组件的互斥访问
7、①不可变对象本质上是线程安全的，它们不要求同步
   ②除了可以共享不可变对象，甚至也可以共享他们的内部信息。
   ③不可变对象为其他对象提供了大量的构件
   ④不可变对象无偿地提供了失败的原子性
   ⑤不可变对象真正唯一的缺点是对于不同的值都需要一个单独的对象
8、①为了允许继承，构造器决不能调用可被覆盖的方法
   ②无论是clone还是readObject，都不可以调用可覆盖的方法，不管是以直接还是间接的方式
   ③对于那些并非为了安全地进行子类化而设计和编写文档地类，要禁止子类化
9、①接口使得安全地增强类的功能成为可能
   ②无法给不受自己控制的接口添加缺省方法
   ③骨架实现类被称为AbstractInterface,对于骨架实现类而言,好的文档绝对是非常必要的,无论它是否在接口或者单独的抽象类中
     包含了缺省方法
10、①在java8中添加了缺省方法构造，目的就是允许现有的接口添加方法，但是给现有的接口添加新的方法还是充满风险
    ②常量接口模式是对接口的不良使用，接口应该只被用来定义类型，他们不应该被用来导出常量
11、①标签类过于冗长、容易出错，并且效率低下
12、①嵌套类有四种：静态成员类、非静态成员类、匿名类和局部类，除了第一种之外，其他三种都成为内部类
    ②如果省略了static修饰符，则每个实例都将包含一个额外的指向外围对象的引用，保存这份引用要消耗时间和空间，并且会导致
      外围实例在符合垃圾回收时却仍然得以保留，由此造成的内存泄漏可能是灾难性的，但常常难以发现，因为这个引用是不可见的